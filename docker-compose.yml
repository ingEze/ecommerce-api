services:
  app:
    build:
      dockerfile: Dockerfile
    ports:
      - '${PORT}:${PORT}'
    env_file:
      - .env
    environment:
      - MONGO_URI=${MONGO_URI}
      - APP_URL=${APP_URL}
      - PORT=${PORT}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - AUTH_TOKEN_SECRET=${AUTH_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - RESET_TOKEN_SECRET=${RESET_TOKEN_SECRET}
      - ACCOUNT_ACTIVATE_SECRET=${ACCOUNT_ACTIVATE_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - app-network

  # app-dev:
  #   build:
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   ports:
  #     - '3033:3033'
  #   environment:
  #     - APP_URL=http://localhost:3033
  #   depends_on:
  #     mongo:
  #       condition: service_healthy
  #   networks:
  #     - app-network

  mongo:
    image: mongo:6.0
    restart: always
    ports:
      - '27017:27017'
    command: ['--replSet', "rs0", '--bind_ip_all']
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: |
        mongosh --eval "
        try {
          rs.status();
          print('Replica set is initialized');
        } catch(err) {
          print('Initializing replica set...');
          rs.initiate({
            _id: 'rs0',
            members: [{ _id: 0, host: 'mongo:27017' }]
          });
        }
        " --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data: